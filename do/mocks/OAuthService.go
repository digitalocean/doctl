// Code generated by MockGen. DO NOT EDIT.
// Source: oauth.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	do "github.com/digitalocean/doctl/do"
	gomock "github.com/golang/mock/gomock"
)

// MockOAuthService is a mock of OAuthService interface.
type MockOAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthServiceMockRecorder
}

// MockOAuthServiceMockRecorder is the mock recorder for MockOAuthService.
type MockOAuthServiceMockRecorder struct {
	mock *MockOAuthService
}

// NewMockOAuthService creates a new mock instance.
func NewMockOAuthService(ctrl *gomock.Controller) *MockOAuthService {
	mock := &MockOAuthService{ctrl: ctrl}
	mock.recorder = &MockOAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthService) EXPECT() *MockOAuthServiceMockRecorder {
	return m.recorder
}

// TokenInfo mocks base method.
func (m *MockOAuthService) TokenInfo(arg0 string) (*do.OAuthTokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenInfo", arg0)
	ret0, _ := ret[0].(*do.OAuthTokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenInfo indicates an expected call of TokenInfo.
func (mr *MockOAuthServiceMockRecorder) TokenInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenInfo", reflect.TypeOf((*MockOAuthService)(nil).TokenInfo), arg0)
}
