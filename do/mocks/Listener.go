// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/listen/listen.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockListenerSerive is a mock of ListenerSerive interface.
type MockListenerSerive struct {
	ctrl     *gomock.Controller
	recorder *MockListenerSeriveMockRecorder
}

// MockListenerSeriveMockRecorder is the mock recorder for MockListenerSerive.
type MockListenerSeriveMockRecorder struct {
	mock *MockListenerSerive
}

// NewMockListenerSerive creates a new mock instance.
func NewMockListenerSerive(ctrl *gomock.Controller) *MockListenerSerive {
	mock := &MockListenerSerive{ctrl: ctrl}
	mock.recorder = &MockListenerSeriveMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListenerSerive) EXPECT() *MockListenerSeriveMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockListenerSerive) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockListenerSeriveMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockListenerSerive)(nil).Start))
}

// Stop mocks base method.
func (m *MockListenerSerive) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockListenerSeriveMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockListenerSerive)(nil).Stop))
}
