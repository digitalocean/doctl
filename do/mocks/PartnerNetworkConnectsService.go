// Code generated by MockGen. DO NOT EDIT.
// Source: partner_network_connect.go
//
// Generated by this command:
//
//	mockgen -source partner_network_connect.go -package=mocks PartnerNetworkConnectsService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	do "github.com/digitalocean/doctl/do"
	godo "github.com/digitalocean/godo"
	gomock "go.uber.org/mock/gomock"
)

// MockPartnerNetworkConnectsService is a mock of PartnerNetworkConnectsService interface.
type MockPartnerNetworkConnectsService struct {
	ctrl     *gomock.Controller
	recorder *MockPartnerNetworkConnectsServiceMockRecorder
	isgomock struct{}
}

// MockPartnerNetworkConnectsServiceMockRecorder is the mock recorder for MockPartnerNetworkConnectsService.
type MockPartnerNetworkConnectsServiceMockRecorder struct {
	mock *MockPartnerNetworkConnectsService
}

// NewMockPartnerNetworkConnectsService creates a new mock instance.
func NewMockPartnerNetworkConnectsService(ctrl *gomock.Controller) *MockPartnerNetworkConnectsService {
	mock := &MockPartnerNetworkConnectsService{ctrl: ctrl}
	mock.recorder = &MockPartnerNetworkConnectsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartnerNetworkConnectsService) EXPECT() *MockPartnerNetworkConnectsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPartnerNetworkConnectsService) Create(arg0 *godo.PartnerNetworkConnectCreateRequest) (*do.PartnerNetworkConnect, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*do.PartnerNetworkConnect)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPartnerNetworkConnectsServiceMockRecorder) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPartnerNetworkConnectsService)(nil).Create), arg0)
}

// DeletePartnerNetworkConnect mocks base method.
func (m *MockPartnerNetworkConnectsService) DeletePartnerNetworkConnect(pncID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePartnerNetworkConnect", pncID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePartnerNetworkConnect indicates an expected call of DeletePartnerNetworkConnect.
func (mr *MockPartnerNetworkConnectsServiceMockRecorder) DeletePartnerNetworkConnect(pncID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartnerNetworkConnect", reflect.TypeOf((*MockPartnerNetworkConnectsService)(nil).DeletePartnerNetworkConnect), pncID)
}

// GetBGPAuthKey mocks base method.
func (m *MockPartnerNetworkConnectsService) GetBGPAuthKey(pncID string) (*do.PartnerNetworkConnectBGPAuthKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBGPAuthKey", pncID)
	ret0, _ := ret[0].(*do.PartnerNetworkConnectBGPAuthKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBGPAuthKey indicates an expected call of GetBGPAuthKey.
func (mr *MockPartnerNetworkConnectsServiceMockRecorder) GetBGPAuthKey(pncID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBGPAuthKey", reflect.TypeOf((*MockPartnerNetworkConnectsService)(nil).GetBGPAuthKey), pncID)
}

// GetPartnerNetworkConnect mocks base method.
func (m *MockPartnerNetworkConnectsService) GetPartnerNetworkConnect(pncID string) (*do.PartnerNetworkConnect, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartnerNetworkConnect", pncID)
	ret0, _ := ret[0].(*do.PartnerNetworkConnect)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartnerNetworkConnect indicates an expected call of GetPartnerNetworkConnect.
func (mr *MockPartnerNetworkConnectsServiceMockRecorder) GetPartnerNetworkConnect(pncID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartnerNetworkConnect", reflect.TypeOf((*MockPartnerNetworkConnectsService)(nil).GetPartnerNetworkConnect), pncID)
}

// GetServiceKey mocks base method.
func (m *MockPartnerNetworkConnectsService) GetServiceKey(pncID string) (*do.PartnerNetworkConnectServiceKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceKey", pncID)
	ret0, _ := ret[0].(*do.PartnerNetworkConnectServiceKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceKey indicates an expected call of GetServiceKey.
func (mr *MockPartnerNetworkConnectsServiceMockRecorder) GetServiceKey(pncID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceKey", reflect.TypeOf((*MockPartnerNetworkConnectsService)(nil).GetServiceKey), pncID)
}

// ListPartnerNetworkConnectRoutes mocks base method.
func (m *MockPartnerNetworkConnectsService) ListPartnerNetworkConnectRoutes(pncID string) (do.PartnerNetworkConnectRoutes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPartnerNetworkConnectRoutes", pncID)
	ret0, _ := ret[0].(do.PartnerNetworkConnectRoutes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPartnerNetworkConnectRoutes indicates an expected call of ListPartnerNetworkConnectRoutes.
func (mr *MockPartnerNetworkConnectsServiceMockRecorder) ListPartnerNetworkConnectRoutes(pncID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartnerNetworkConnectRoutes", reflect.TypeOf((*MockPartnerNetworkConnectsService)(nil).ListPartnerNetworkConnectRoutes), pncID)
}

// ListPartnerNetworkConnects mocks base method.
func (m *MockPartnerNetworkConnectsService) ListPartnerNetworkConnects() (do.PartnerNetworkConnects, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPartnerNetworkConnects")
	ret0, _ := ret[0].(do.PartnerNetworkConnects)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPartnerNetworkConnects indicates an expected call of ListPartnerNetworkConnects.
func (mr *MockPartnerNetworkConnectsServiceMockRecorder) ListPartnerNetworkConnects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartnerNetworkConnects", reflect.TypeOf((*MockPartnerNetworkConnectsService)(nil).ListPartnerNetworkConnects))
}

// RegenerateServiceKey mocks base method.
func (m *MockPartnerNetworkConnectsService) RegenerateServiceKey(pncID string) (*do.PartnerNetworkConnectRegenerateServiceKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegenerateServiceKey", pncID)
	ret0, _ := ret[0].(*do.PartnerNetworkConnectRegenerateServiceKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegenerateServiceKey indicates an expected call of RegenerateServiceKey.
func (mr *MockPartnerNetworkConnectsServiceMockRecorder) RegenerateServiceKey(pncID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegenerateServiceKey", reflect.TypeOf((*MockPartnerNetworkConnectsService)(nil).RegenerateServiceKey), pncID)
}

// UpdatePartnerNetworkConnect mocks base method.
func (m *MockPartnerNetworkConnectsService) UpdatePartnerNetworkConnect(pncID string, req *godo.PartnerNetworkConnectUpdateRequest) (*do.PartnerNetworkConnect, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePartnerNetworkConnect", pncID, req)
	ret0, _ := ret[0].(*do.PartnerNetworkConnect)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePartnerNetworkConnect indicates an expected call of UpdatePartnerNetworkConnect.
func (mr *MockPartnerNetworkConnectsServiceMockRecorder) UpdatePartnerNetworkConnect(pncID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartnerNetworkConnect", reflect.TypeOf((*MockPartnerNetworkConnectsService)(nil).UpdatePartnerNetworkConnect), pncID, req)
}
