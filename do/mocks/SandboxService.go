// Code generated by MockGen. DO NOT EDIT.
// Source: sandbox.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	exec "os/exec"
	reflect "reflect"

	do "github.com/digitalocean/doctl/do"
	gomock "github.com/golang/mock/gomock"
)

// MockSandboxService is a mock of SandboxService interface.
type MockSandboxService struct {
	ctrl     *gomock.Controller
	recorder *MockSandboxServiceMockRecorder
}

// MockSandboxServiceMockRecorder is the mock recorder for MockSandboxService.
type MockSandboxServiceMockRecorder struct {
	mock *MockSandboxService
}

// NewMockSandboxService creates a new mock instance.
func NewMockSandboxService(ctrl *gomock.Controller) *MockSandboxService {
	mock := &MockSandboxService{ctrl: ctrl}
	mock.recorder = &MockSandboxServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSandboxService) EXPECT() *MockSandboxServiceMockRecorder {
	return m.recorder
}

// Cmd mocks base method.
func (m *MockSandboxService) Cmd(arg0 string, arg1 []string) (*exec.Cmd, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cmd", arg0, arg1)
	ret0, _ := ret[0].(*exec.Cmd)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cmd indicates an expected call of Cmd.
func (mr *MockSandboxServiceMockRecorder) Cmd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cmd", reflect.TypeOf((*MockSandboxService)(nil).Cmd), arg0, arg1)
}

// Exec mocks base method.
func (m *MockSandboxService) Exec(arg0 *exec.Cmd) (do.SandboxOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0)
	ret0, _ := ret[0].(do.SandboxOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockSandboxServiceMockRecorder) Exec(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockSandboxService)(nil).Exec), arg0)
}

// GetHostInfo mocks base method.
func (m *MockSandboxService) GetHostInfo(arg0 string) (do.ServerlessHostInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostInfo", arg0)
	ret0, _ := ret[0].(do.ServerlessHostInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostInfo indicates an expected call of GetHostInfo.
func (mr *MockSandboxServiceMockRecorder) GetHostInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostInfo", reflect.TypeOf((*MockSandboxService)(nil).GetHostInfo), arg0)
}

// GetSandboxNamespace mocks base method.
func (m *MockSandboxService) GetSandboxNamespace(arg0 context.Context) (do.SandboxCredentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSandboxNamespace", arg0)
	ret0, _ := ret[0].(do.SandboxCredentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSandboxNamespace indicates an expected call of GetSandboxNamespace.
func (mr *MockSandboxServiceMockRecorder) GetSandboxNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSandboxNamespace", reflect.TypeOf((*MockSandboxService)(nil).GetSandboxNamespace), arg0)
}

// Stream mocks base method.
func (m *MockSandboxService) Stream(arg0 *exec.Cmd) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stream indicates an expected call of Stream.
func (mr *MockSandboxServiceMockRecorder) Stream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockSandboxService)(nil).Stream), arg0)
}

// WriteCredentials mocks base method.
func (m *MockSandboxService) WriteCredentials(arg0 do.SandboxCredentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCredentials", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCredentials indicates an expected call of WriteCredentials.
func (mr *MockSandboxServiceMockRecorder) WriteCredentials(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCredentials", reflect.TypeOf((*MockSandboxService)(nil).WriteCredentials), arg0)
}
