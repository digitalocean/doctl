// Code generated by MockGen. DO NOT EDIT.
// Source: reserved_ip_actions.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	do "github.com/digitalocean/doctl/do"
	godo "github.com/digitalocean/godo"
	gomock "github.com/golang/mock/gomock"
)

// MockReservedIPActionsService is a mock of ReservedIPActionsService interface.
type MockReservedIPActionsService struct {
	ctrl     *gomock.Controller
	recorder *MockReservedIPActionsServiceMockRecorder
}

// MockReservedIPActionsServiceMockRecorder is the mock recorder for MockReservedIPActionsService.
type MockReservedIPActionsServiceMockRecorder struct {
	mock *MockReservedIPActionsService
}

// NewMockReservedIPActionsService creates a new mock instance.
func NewMockReservedIPActionsService(ctrl *gomock.Controller) *MockReservedIPActionsService {
	mock := &MockReservedIPActionsService{ctrl: ctrl}
	mock.recorder = &MockReservedIPActionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservedIPActionsService) EXPECT() *MockReservedIPActionsServiceMockRecorder {
	return m.recorder
}

// Assign mocks base method.
func (m *MockReservedIPActionsService) Assign(ip string, dropletID int) (*do.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Assign", ip, dropletID)
	ret0, _ := ret[0].(*do.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Assign indicates an expected call of Assign.
func (mr *MockReservedIPActionsServiceMockRecorder) Assign(ip, dropletID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assign", reflect.TypeOf((*MockReservedIPActionsService)(nil).Assign), ip, dropletID)
}

// Get mocks base method.
func (m *MockReservedIPActionsService) Get(ip string, actionID int) (*do.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ip, actionID)
	ret0, _ := ret[0].(*do.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockReservedIPActionsServiceMockRecorder) Get(ip, actionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReservedIPActionsService)(nil).Get), ip, actionID)
}

// List mocks base method.
func (m *MockReservedIPActionsService) List(ip string, opt *godo.ListOptions) ([]do.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ip, opt)
	ret0, _ := ret[0].([]do.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockReservedIPActionsServiceMockRecorder) List(ip, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockReservedIPActionsService)(nil).List), ip, opt)
}

// Unassign mocks base method.
func (m *MockReservedIPActionsService) Unassign(ip string) (*do.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unassign", ip)
	ret0, _ := ret[0].(*do.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unassign indicates an expected call of Unassign.
func (mr *MockReservedIPActionsServiceMockRecorder) Unassign(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unassign", reflect.TypeOf((*MockReservedIPActionsService)(nil).Unassign), ip)
}
