// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/listen/listen.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockListenerService is a mock of ListenerService interface.
type MockListenerService struct {
	ctrl     *gomock.Controller
	recorder *MockListenerServiceMockRecorder
}

// MockListenerServiceMockRecorder is the mock recorder for MockListenerService.
type MockListenerServiceMockRecorder struct {
	mock *MockListenerService
}

// NewMockListenerService creates a new mock instance.
func NewMockListenerService(ctrl *gomock.Controller) *MockListenerService {
	mock := &MockListenerService{ctrl: ctrl}
	mock.recorder = &MockListenerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListenerService) EXPECT() *MockListenerServiceMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockListenerService) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockListenerServiceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockListenerService)(nil).Start))
}

// Stop mocks base method.
func (m *MockListenerService) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockListenerServiceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockListenerService)(nil).Stop))
}
