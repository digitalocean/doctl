// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/listen/listen.go
//
// Generated by this command:
//
//	mockgen -source ../pkg/listen/listen.go -package=mocks Listen
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockListenerService is a mock of ListenerService interface.
type MockListenerService struct {
	ctrl     *gomock.Controller
	recorder *MockListenerServiceMockRecorder
	isgomock struct{}
}

// MockListenerServiceMockRecorder is the mock recorder for MockListenerService.
type MockListenerServiceMockRecorder struct {
	mock *MockListenerService
}

// NewMockListenerService creates a new mock instance.
func NewMockListenerService(ctrl *gomock.Controller) *MockListenerService {
	mock := &MockListenerService{ctrl: ctrl}
	mock.recorder = &MockListenerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListenerService) EXPECT() *MockListenerServiceMockRecorder {
	return m.recorder
}

// Listen mocks base method.
func (m *MockListenerService) Listen(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen.
func (mr *MockListenerServiceMockRecorder) Listen(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockListenerService)(nil).Listen), ctx)
}
