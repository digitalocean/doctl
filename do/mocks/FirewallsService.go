package mocks

import do "github.com/digitalocean/doctl/do"
import godo "github.com/digitalocean/godo"
import mock "github.com/stretchr/testify/mock"

// FirewallsService is an autogenerated mock type for the FirewallsService type
type FirewallsService struct {
	mock.Mock
}

// AddDroplets provides a mock function with given fields: fID, dIDs
func (_m *FirewallsService) AddDroplets(fID string, dIDs ...int) error {
	ret := _m.Called(fID, dIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...int) error); ok {
		r0 = rf(fID, dIDs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddRules provides a mock function with given fields: fID, rr
func (_m *FirewallsService) AddRules(fID string, rr *godo.FirewallRulesRequest) error {
	ret := _m.Called(fID, rr)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *godo.FirewallRulesRequest) error); ok {
		r0 = rf(fID, rr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddTags provides a mock function with given fields: fID, tags
func (_m *FirewallsService) AddTags(fID string, tags ...string) error {
	ret := _m.Called(fID, tags)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...string) error); ok {
		r0 = rf(fID, tags...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: fr
func (_m *FirewallsService) Create(fr *godo.FirewallRequest) (*do.Firewall, error) {
	ret := _m.Called(fr)

	var r0 *do.Firewall
	if rf, ok := ret.Get(0).(func(*godo.FirewallRequest) *do.Firewall); ok {
		r0 = rf(fr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*do.Firewall)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*godo.FirewallRequest) error); ok {
		r1 = rf(fr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: fID
func (_m *FirewallsService) Delete(fID string) error {
	ret := _m.Called(fID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(fID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: fID
func (_m *FirewallsService) Get(fID string) (*do.Firewall, error) {
	ret := _m.Called(fID)

	var r0 *do.Firewall
	if rf, ok := ret.Get(0).(func(string) *do.Firewall); ok {
		r0 = rf(fID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*do.Firewall)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *FirewallsService) List() (do.Firewalls, error) {
	ret := _m.Called()

	var r0 do.Firewalls
	if rf, ok := ret.Get(0).(func() do.Firewalls); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(do.Firewalls)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByDroplet provides a mock function with given fields: dID
func (_m *FirewallsService) ListByDroplet(dID int) (do.Firewalls, error) {
	ret := _m.Called(dID)

	var r0 do.Firewalls
	if rf, ok := ret.Get(0).(func(int) do.Firewalls); ok {
		r0 = rf(dID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(do.Firewalls)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(dID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveDroplets provides a mock function with given fields: fID, dIDs
func (_m *FirewallsService) RemoveDroplets(fID string, dIDs ...int) error {
	ret := _m.Called(fID, dIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...int) error); ok {
		r0 = rf(fID, dIDs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveRules provides a mock function with given fields: fID, rr
func (_m *FirewallsService) RemoveRules(fID string, rr *godo.FirewallRulesRequest) error {
	ret := _m.Called(fID, rr)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *godo.FirewallRulesRequest) error); ok {
		r0 = rf(fID, rr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveTags provides a mock function with given fields: fID, tags
func (_m *FirewallsService) RemoveTags(fID string, tags ...string) error {
	ret := _m.Called(fID, tags)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...string) error); ok {
		r0 = rf(fID, tags...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: fID, fr
func (_m *FirewallsService) Update(fID string, fr *godo.FirewallRequest) (*do.Firewall, error) {
	ret := _m.Called(fID, fr)

	var r0 *do.Firewall
	if rf, ok := ret.Get(0).(func(string, *godo.FirewallRequest) *do.Firewall); ok {
		r0 = rf(fID, fr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*do.Firewall)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *godo.FirewallRequest) error); ok {
		r1 = rf(fID, fr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

var _ do.FirewallsService = (*FirewallsService)(nil)
