// Code generated by MockGen. DO NOT EDIT.
// Source: 1_clicks.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	do "github.com/digitalocean/doctl/do"
	gomock "github.com/golang/mock/gomock"
)

// MockOneClickService is a mock of OneClickService interface.
type MockOneClickService struct {
	ctrl     *gomock.Controller
	recorder *MockOneClickServiceMockRecorder
}

// MockOneClickServiceMockRecorder is the mock recorder for MockOneClickService.
type MockOneClickServiceMockRecorder struct {
	mock *MockOneClickService
}

// NewMockOneClickService creates a new mock instance.
func NewMockOneClickService(ctrl *gomock.Controller) *MockOneClickService {
	mock := &MockOneClickService{ctrl: ctrl}
	mock.recorder = &MockOneClickServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOneClickService) EXPECT() *MockOneClickServiceMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockOneClickService) List(arg0 string) (do.OneClicks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(do.OneClicks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockOneClickServiceMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOneClickService)(nil).List), arg0)
}

// InstallKubernetes mocks base method.
func (m *MockOneClickService) InstallKubernetes(arg0 string, arg1 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallKubernetes", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallKubernetes indicates an expected call of InstallKubernetes.
func (mr *MockOneClickServiceMockRecorder) InstallKubernetes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallKubernetes", reflect.TypeOf((*MockOneClickService)(nil).InstallKubernetes), arg0, arg1)
}
