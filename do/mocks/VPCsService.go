// Code generated by MockGen. DO NOT EDIT.
// Source: vpcs.go
//
// Generated by this command:
//
//	mockgen -source vpcs.go -package=mocks VPCsService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	do "github.com/digitalocean/doctl/do"
	godo "github.com/digitalocean/godo"
	gomock "go.uber.org/mock/gomock"
)

// MockVPCsService is a mock of VPCsService interface.
type MockVPCsService struct {
	ctrl     *gomock.Controller
	recorder *MockVPCsServiceMockRecorder
}

// MockVPCsServiceMockRecorder is the mock recorder for MockVPCsService.
type MockVPCsServiceMockRecorder struct {
	mock *MockVPCsService
}

// NewMockVPCsService creates a new mock instance.
func NewMockVPCsService(ctrl *gomock.Controller) *MockVPCsService {
	mock := &MockVPCsService{ctrl: ctrl}
	mock.recorder = &MockVPCsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVPCsService) EXPECT() *MockVPCsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVPCsService) Create(vpcr *godo.VPCCreateRequest) (*do.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", vpcr)
	ret0, _ := ret[0].(*do.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVPCsServiceMockRecorder) Create(vpcr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVPCsService)(nil).Create), vpcr)
}

// CreateVPCPeering mocks base method.
func (m *MockVPCsService) CreateVPCPeering(req *godo.VPCPeeringCreateRequest) (*do.VPCPeering, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVPCPeering", req)
	ret0, _ := ret[0].(*do.VPCPeering)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVPCPeering indicates an expected call of CreateVPCPeering.
func (mr *MockVPCsServiceMockRecorder) CreateVPCPeering(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVPCPeering", reflect.TypeOf((*MockVPCsService)(nil).CreateVPCPeering), req)
}

// Delete mocks base method.
func (m *MockVPCsService) Delete(vpcUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", vpcUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVPCsServiceMockRecorder) Delete(vpcUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVPCsService)(nil).Delete), vpcUUID)
}

// DeleteVPCPeering mocks base method.
func (m *MockVPCsService) DeleteVPCPeering(peeringID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVPCPeering", peeringID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVPCPeering indicates an expected call of DeleteVPCPeering.
func (mr *MockVPCsServiceMockRecorder) DeleteVPCPeering(peeringID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVPCPeering", reflect.TypeOf((*MockVPCsService)(nil).DeleteVPCPeering), peeringID)
}

// Get mocks base method.
func (m *MockVPCsService) Get(vpcUUID string) (*do.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", vpcUUID)
	ret0, _ := ret[0].(*do.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVPCsServiceMockRecorder) Get(vpcUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVPCsService)(nil).Get), vpcUUID)
}

// GetPeering mocks base method.
func (m *MockVPCsService) GetPeering(peeringID string) (*do.VPCPeering, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeering", peeringID)
	ret0, _ := ret[0].(*do.VPCPeering)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeering indicates an expected call of GetPeering.
func (mr *MockVPCsServiceMockRecorder) GetPeering(peeringID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeering", reflect.TypeOf((*MockVPCsService)(nil).GetPeering), peeringID)
}

// List mocks base method.
func (m *MockVPCsService) List() (do.VPCs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(do.VPCs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVPCsServiceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVPCsService)(nil).List))
}

// ListVPCPeerings mocks base method.
func (m *MockVPCsService) ListVPCPeerings() (do.VPCPeerings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVPCPeerings")
	ret0, _ := ret[0].(do.VPCPeerings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVPCPeerings indicates an expected call of ListVPCPeerings.
func (mr *MockVPCsServiceMockRecorder) ListVPCPeerings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVPCPeerings", reflect.TypeOf((*MockVPCsService)(nil).ListVPCPeerings))
}

// ListVPCPeeringsByVPCID mocks base method.
func (m *MockVPCsService) ListVPCPeeringsByVPCID(vpcID string) (do.VPCPeerings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVPCPeeringsByVPCID", vpcID)
	ret0, _ := ret[0].(do.VPCPeerings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVPCPeeringsByVPCID indicates an expected call of ListVPCPeeringsByVPCID.
func (mr *MockVPCsServiceMockRecorder) ListVPCPeeringsByVPCID(vpcID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVPCPeeringsByVPCID", reflect.TypeOf((*MockVPCsService)(nil).ListVPCPeeringsByVPCID), vpcID)
}

// PartialUpdate mocks base method.
func (m *MockVPCsService) PartialUpdate(vpcUUID string, options ...godo.VPCSetField) (*do.VPC, error) {
	m.ctrl.T.Helper()
	varargs := []any{vpcUUID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PartialUpdate", varargs...)
	ret0, _ := ret[0].(*do.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartialUpdate indicates an expected call of PartialUpdate.
func (mr *MockVPCsServiceMockRecorder) PartialUpdate(vpcUUID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{vpcUUID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartialUpdate", reflect.TypeOf((*MockVPCsService)(nil).PartialUpdate), varargs...)
}

// Update mocks base method.
func (m *MockVPCsService) Update(vpcUUID string, vpcr *godo.VPCUpdateRequest) (*do.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", vpcUUID, vpcr)
	ret0, _ := ret[0].(*do.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVPCsServiceMockRecorder) Update(vpcUUID, vpcr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVPCsService)(nil).Update), vpcUUID, vpcr)
}

// UpdateVPCPeering mocks base method.
func (m *MockVPCsService) UpdateVPCPeering(peeringID string, req *godo.VPCPeeringUpdateRequest) (*do.VPCPeering, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVPCPeering", peeringID, req)
	ret0, _ := ret[0].(*do.VPCPeering)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVPCPeering indicates an expected call of UpdateVPCPeering.
func (mr *MockVPCsServiceMockRecorder) UpdateVPCPeering(peeringID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVPCPeering", reflect.TypeOf((*MockVPCsService)(nil).UpdateVPCPeering), peeringID, req)
}
