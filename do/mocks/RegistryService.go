// Code generated by MockGen. DO NOT EDIT.
// Source: registry.go
//
// Generated by this command:
//
//	mockgen -source registry.go -package=mocks RegistryService,RegistriesService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	do "github.com/digitalocean/doctl/do"
	godo "github.com/digitalocean/godo"
	gomock "go.uber.org/mock/gomock"
)

// MockRegistryService is a mock of RegistryService interface.
type MockRegistryService struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryServiceMockRecorder
	isgomock struct{}
}

// MockRegistryServiceMockRecorder is the mock recorder for MockRegistryService.
type MockRegistryServiceMockRecorder struct {
	mock *MockRegistryService
}

// NewMockRegistryService creates a new mock instance.
func NewMockRegistryService(ctrl *gomock.Controller) *MockRegistryService {
	mock := &MockRegistryService{ctrl: ctrl}
	mock.recorder = &MockRegistryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistryService) EXPECT() *MockRegistryServiceMockRecorder {
	return m.recorder
}

// CancelGarbageCollection mocks base method.
func (m *MockRegistryService) CancelGarbageCollection(arg0, arg1 string) (*do.GarbageCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelGarbageCollection", arg0, arg1)
	ret0, _ := ret[0].(*do.GarbageCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelGarbageCollection indicates an expected call of CancelGarbageCollection.
func (mr *MockRegistryServiceMockRecorder) CancelGarbageCollection(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelGarbageCollection", reflect.TypeOf((*MockRegistryService)(nil).CancelGarbageCollection), arg0, arg1)
}

// Create mocks base method.
func (m *MockRegistryService) Create(arg0 *godo.RegistryCreateRequest) (*do.Registry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*do.Registry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRegistryServiceMockRecorder) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRegistryService)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockRegistryService) Delete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRegistryServiceMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRegistryService)(nil).Delete))
}

// DeleteManifest mocks base method.
func (m *MockRegistryService) DeleteManifest(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteManifest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteManifest indicates an expected call of DeleteManifest.
func (mr *MockRegistryServiceMockRecorder) DeleteManifest(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteManifest", reflect.TypeOf((*MockRegistryService)(nil).DeleteManifest), arg0, arg1, arg2)
}

// DeleteTag mocks base method.
func (m *MockRegistryService) DeleteTag(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockRegistryServiceMockRecorder) DeleteTag(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockRegistryService)(nil).DeleteTag), arg0, arg1, arg2)
}

// DockerCredentials mocks base method.
func (m *MockRegistryService) DockerCredentials(arg0 *godo.RegistryDockerCredentialsRequest) (*godo.DockerCredentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DockerCredentials", arg0)
	ret0, _ := ret[0].(*godo.DockerCredentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DockerCredentials indicates an expected call of DockerCredentials.
func (mr *MockRegistryServiceMockRecorder) DockerCredentials(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DockerCredentials", reflect.TypeOf((*MockRegistryService)(nil).DockerCredentials), arg0)
}

// Endpoint mocks base method.
func (m *MockRegistryService) Endpoint() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Endpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// Endpoint indicates an expected call of Endpoint.
func (mr *MockRegistryServiceMockRecorder) Endpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endpoint", reflect.TypeOf((*MockRegistryService)(nil).Endpoint))
}

// Get mocks base method.
func (m *MockRegistryService) Get() (*do.Registry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(*do.Registry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRegistryServiceMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRegistryService)(nil).Get))
}

// GetAvailableRegions mocks base method.
func (m *MockRegistryService) GetAvailableRegions() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableRegions")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableRegions indicates an expected call of GetAvailableRegions.
func (mr *MockRegistryServiceMockRecorder) GetAvailableRegions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableRegions", reflect.TypeOf((*MockRegistryService)(nil).GetAvailableRegions))
}

// GetGarbageCollection mocks base method.
func (m *MockRegistryService) GetGarbageCollection(arg0 string) (*do.GarbageCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGarbageCollection", arg0)
	ret0, _ := ret[0].(*do.GarbageCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGarbageCollection indicates an expected call of GetGarbageCollection.
func (mr *MockRegistryServiceMockRecorder) GetGarbageCollection(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGarbageCollection", reflect.TypeOf((*MockRegistryService)(nil).GetGarbageCollection), arg0)
}

// GetSubscriptionTiers mocks base method.
func (m *MockRegistryService) GetSubscriptionTiers() ([]do.RegistrySubscriptionTier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionTiers")
	ret0, _ := ret[0].([]do.RegistrySubscriptionTier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionTiers indicates an expected call of GetSubscriptionTiers.
func (mr *MockRegistryServiceMockRecorder) GetSubscriptionTiers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionTiers", reflect.TypeOf((*MockRegistryService)(nil).GetSubscriptionTiers))
}

// ListGarbageCollections mocks base method.
func (m *MockRegistryService) ListGarbageCollections(arg0 string) ([]do.GarbageCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGarbageCollections", arg0)
	ret0, _ := ret[0].([]do.GarbageCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGarbageCollections indicates an expected call of ListGarbageCollections.
func (mr *MockRegistryServiceMockRecorder) ListGarbageCollections(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGarbageCollections", reflect.TypeOf((*MockRegistryService)(nil).ListGarbageCollections), arg0)
}

// ListRepositories mocks base method.
func (m *MockRegistryService) ListRepositories(arg0 string) ([]do.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositories", arg0)
	ret0, _ := ret[0].([]do.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositories indicates an expected call of ListRepositories.
func (mr *MockRegistryServiceMockRecorder) ListRepositories(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositories", reflect.TypeOf((*MockRegistryService)(nil).ListRepositories), arg0)
}

// ListRepositoriesV2 mocks base method.
func (m *MockRegistryService) ListRepositoriesV2(arg0 string) ([]do.RepositoryV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoriesV2", arg0)
	ret0, _ := ret[0].([]do.RepositoryV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositoriesV2 indicates an expected call of ListRepositoriesV2.
func (mr *MockRegistryServiceMockRecorder) ListRepositoriesV2(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoriesV2", reflect.TypeOf((*MockRegistryService)(nil).ListRepositoriesV2), arg0)
}

// ListRepositoryManifests mocks base method.
func (m *MockRegistryService) ListRepositoryManifests(arg0, arg1 string) ([]do.RepositoryManifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryManifests", arg0, arg1)
	ret0, _ := ret[0].([]do.RepositoryManifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositoryManifests indicates an expected call of ListRepositoryManifests.
func (mr *MockRegistryServiceMockRecorder) ListRepositoryManifests(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryManifests", reflect.TypeOf((*MockRegistryService)(nil).ListRepositoryManifests), arg0, arg1)
}

// ListRepositoryTags mocks base method.
func (m *MockRegistryService) ListRepositoryTags(arg0, arg1 string) ([]do.RepositoryTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryTags", arg0, arg1)
	ret0, _ := ret[0].([]do.RepositoryTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositoryTags indicates an expected call of ListRepositoryTags.
func (mr *MockRegistryServiceMockRecorder) ListRepositoryTags(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryTags", reflect.TypeOf((*MockRegistryService)(nil).ListRepositoryTags), arg0, arg1)
}

// RevokeOAuthToken mocks base method.
func (m *MockRegistryService) RevokeOAuthToken(token, endpoint string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeOAuthToken", token, endpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeOAuthToken indicates an expected call of RevokeOAuthToken.
func (mr *MockRegistryServiceMockRecorder) RevokeOAuthToken(token, endpoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeOAuthToken", reflect.TypeOf((*MockRegistryService)(nil).RevokeOAuthToken), token, endpoint)
}

// StartGarbageCollection mocks base method.
func (m *MockRegistryService) StartGarbageCollection(arg0 string, arg1 *godo.StartGarbageCollectionRequest) (*do.GarbageCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartGarbageCollection", arg0, arg1)
	ret0, _ := ret[0].(*do.GarbageCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartGarbageCollection indicates an expected call of StartGarbageCollection.
func (mr *MockRegistryServiceMockRecorder) StartGarbageCollection(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartGarbageCollection", reflect.TypeOf((*MockRegistryService)(nil).StartGarbageCollection), arg0, arg1)
}

// MockRegistriesService is a mock of RegistriesService interface.
type MockRegistriesService struct {
	ctrl     *gomock.Controller
	recorder *MockRegistriesServiceMockRecorder
	isgomock struct{}
}

// MockRegistriesServiceMockRecorder is the mock recorder for MockRegistriesService.
type MockRegistriesServiceMockRecorder struct {
	mock *MockRegistriesService
}

// NewMockRegistriesService creates a new mock instance.
func NewMockRegistriesService(ctrl *gomock.Controller) *MockRegistriesService {
	mock := &MockRegistriesService{ctrl: ctrl}
	mock.recorder = &MockRegistriesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistriesService) EXPECT() *MockRegistriesServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRegistriesService) Create(arg0 *godo.RegistryCreateRequest) (*do.Registry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*do.Registry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRegistriesServiceMockRecorder) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRegistriesService)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockRegistriesService) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRegistriesServiceMockRecorder) Delete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRegistriesService)(nil).Delete), arg0)
}

// DeleteManifest mocks base method.
func (m *MockRegistriesService) DeleteManifest(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteManifest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteManifest indicates an expected call of DeleteManifest.
func (mr *MockRegistriesServiceMockRecorder) DeleteManifest(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteManifest", reflect.TypeOf((*MockRegistriesService)(nil).DeleteManifest), arg0, arg1, arg2)
}

// DeleteTag mocks base method.
func (m *MockRegistriesService) DeleteTag(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockRegistriesServiceMockRecorder) DeleteTag(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockRegistriesService)(nil).DeleteTag), arg0, arg1, arg2)
}

// DockerCredentials mocks base method.
func (m *MockRegistriesService) DockerCredentials(arg0 string, arg1 *godo.RegistryDockerCredentialsRequest) (*godo.DockerCredentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DockerCredentials", arg0, arg1)
	ret0, _ := ret[0].(*godo.DockerCredentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DockerCredentials indicates an expected call of DockerCredentials.
func (mr *MockRegistriesServiceMockRecorder) DockerCredentials(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DockerCredentials", reflect.TypeOf((*MockRegistriesService)(nil).DockerCredentials), arg0, arg1)
}

// Get mocks base method.
func (m *MockRegistriesService) Get(arg0 string) (*do.Registry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*do.Registry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRegistriesServiceMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRegistriesService)(nil).Get), arg0)
}

// GetGarbageCollection mocks base method.
func (m *MockRegistriesService) GetGarbageCollection(arg0 string) (*do.GarbageCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGarbageCollection", arg0)
	ret0, _ := ret[0].(*do.GarbageCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGarbageCollection indicates an expected call of GetGarbageCollection.
func (mr *MockRegistriesServiceMockRecorder) GetGarbageCollection(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGarbageCollection", reflect.TypeOf((*MockRegistriesService)(nil).GetGarbageCollection), arg0)
}

// GetOptions mocks base method.
func (m *MockRegistriesService) GetOptions() (*godo.RegistryOptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*godo.RegistryOptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockRegistriesServiceMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockRegistriesService)(nil).GetOptions))
}

// List mocks base method.
func (m *MockRegistriesService) List() ([]do.Registry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]do.Registry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRegistriesServiceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRegistriesService)(nil).List))
}

// ListGarbageCollections mocks base method.
func (m *MockRegistriesService) ListGarbageCollections(arg0 string) ([]do.GarbageCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGarbageCollections", arg0)
	ret0, _ := ret[0].([]do.GarbageCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGarbageCollections indicates an expected call of ListGarbageCollections.
func (mr *MockRegistriesServiceMockRecorder) ListGarbageCollections(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGarbageCollections", reflect.TypeOf((*MockRegistriesService)(nil).ListGarbageCollections), arg0)
}

// ListRepositories mocks base method.
func (m *MockRegistriesService) ListRepositories(arg0 string) ([]do.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositories", arg0)
	ret0, _ := ret[0].([]do.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositories indicates an expected call of ListRepositories.
func (mr *MockRegistriesServiceMockRecorder) ListRepositories(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositories", reflect.TypeOf((*MockRegistriesService)(nil).ListRepositories), arg0)
}

// ListRepositoriesV2 mocks base method.
func (m *MockRegistriesService) ListRepositoriesV2(arg0 string) ([]do.RepositoryV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoriesV2", arg0)
	ret0, _ := ret[0].([]do.RepositoryV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositoriesV2 indicates an expected call of ListRepositoriesV2.
func (mr *MockRegistriesServiceMockRecorder) ListRepositoriesV2(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoriesV2", reflect.TypeOf((*MockRegistriesService)(nil).ListRepositoriesV2), arg0)
}

// ListRepositoryManifests mocks base method.
func (m *MockRegistriesService) ListRepositoryManifests(arg0, arg1 string) ([]do.RepositoryManifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryManifests", arg0, arg1)
	ret0, _ := ret[0].([]do.RepositoryManifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositoryManifests indicates an expected call of ListRepositoryManifests.
func (mr *MockRegistriesServiceMockRecorder) ListRepositoryManifests(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryManifests", reflect.TypeOf((*MockRegistriesService)(nil).ListRepositoryManifests), arg0, arg1)
}

// ListRepositoryTags mocks base method.
func (m *MockRegistriesService) ListRepositoryTags(arg0, arg1 string) ([]do.RepositoryTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryTags", arg0, arg1)
	ret0, _ := ret[0].([]do.RepositoryTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositoryTags indicates an expected call of ListRepositoryTags.
func (mr *MockRegistriesServiceMockRecorder) ListRepositoryTags(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryTags", reflect.TypeOf((*MockRegistriesService)(nil).ListRepositoryTags), arg0, arg1)
}

// StartGarbageCollection mocks base method.
func (m *MockRegistriesService) StartGarbageCollection(arg0 string, arg1 *godo.StartGarbageCollectionRequest) (*do.GarbageCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartGarbageCollection", arg0, arg1)
	ret0, _ := ret[0].(*do.GarbageCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartGarbageCollection indicates an expected call of StartGarbageCollection.
func (mr *MockRegistriesServiceMockRecorder) StartGarbageCollection(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartGarbageCollection", reflect.TypeOf((*MockRegistriesService)(nil).StartGarbageCollection), arg0, arg1)
}

// UpdateGarbageCollection mocks base method.
func (m *MockRegistriesService) UpdateGarbageCollection(arg0, arg1 string, arg2 *godo.UpdateGarbageCollectionRequest) (*do.GarbageCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGarbageCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(*do.GarbageCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGarbageCollection indicates an expected call of UpdateGarbageCollection.
func (mr *MockRegistriesServiceMockRecorder) UpdateGarbageCollection(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGarbageCollection", reflect.TypeOf((*MockRegistriesService)(nil).UpdateGarbageCollection), arg0, arg1, arg2)
}

// GetAvailableRegions mocks base method.
func (m *MockRegistriesService) GetAvailableRegions() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableRegions")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableRegions indicates an expected call of GetAvailableRegions.
func (mr *MockRegistriesServiceMockRecorder) GetAvailableRegions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableRegions", reflect.TypeOf((*MockRegistriesService)(nil).GetAvailableRegions))
}

// GetSubscriptionTiers mocks base method.
func (m *MockRegistriesService) GetSubscriptionTiers() ([]do.RegistrySubscriptionTier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionTiers")
	ret0, _ := ret[0].([]do.RegistrySubscriptionTier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionTiers indicates an expected call of GetSubscriptionTiers.
func (mr *MockRegistriesServiceMockRecorder) GetSubscriptionTiers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionTiers", reflect.TypeOf((*MockRegistriesService)(nil).GetSubscriptionTiers))
}
