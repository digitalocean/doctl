// Code generated by MockGen. DO NOT EDIT.
// Source: partner_interconnect_attachments.go
//
// Generated by this command:
//
//	mockgen -source partner_interconnect_attachments.go -package=mocks PartnerInterconnectAttachmentsService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	do "github.com/digitalocean/doctl/do"
	godo "github.com/digitalocean/godo"
	gomock "go.uber.org/mock/gomock"
)

// MockPartnerInterconnectAttachmentsService is a mock of PartnerInterconnectAttachmentsService interface.
type MockPartnerInterconnectAttachmentsService struct {
	ctrl     *gomock.Controller
	recorder *MockPartnerInterconnectAttachmentsServiceMockRecorder
	isgomock struct{}
}

// MockPartnerInterconnectAttachmentsServiceMockRecorder is the mock recorder for MockPartnerInterconnectAttachmentsService.
type MockPartnerInterconnectAttachmentsServiceMockRecorder struct {
	mock *MockPartnerInterconnectAttachmentsService
}

// NewMockPartnerInterconnectAttachmentsService creates a new mock instance.
func NewMockPartnerInterconnectAttachmentsService(ctrl *gomock.Controller) *MockPartnerInterconnectAttachmentsService {
	mock := &MockPartnerInterconnectAttachmentsService{ctrl: ctrl}
	mock.recorder = &MockPartnerInterconnectAttachmentsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartnerInterconnectAttachmentsService) EXPECT() *MockPartnerInterconnectAttachmentsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPartnerInterconnectAttachmentsService) Create(arg0 *godo.PartnerInterconnectAttachmentCreateRequest) (*do.PartnerInterconnectAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*do.PartnerInterconnectAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPartnerInterconnectAttachmentsServiceMockRecorder) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPartnerInterconnectAttachmentsService)(nil).Create), arg0)
}

// DeletePartnerInterconnectAttachment mocks base method.
func (m *MockPartnerInterconnectAttachmentsService) DeletePartnerInterconnectAttachment(iaID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePartnerInterconnectAttachment", iaID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePartnerInterconnectAttachment indicates an expected call of DeletePartnerInterconnectAttachment.
func (mr *MockPartnerInterconnectAttachmentsServiceMockRecorder) DeletePartnerInterconnectAttachment(iaID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartnerInterconnectAttachment", reflect.TypeOf((*MockPartnerInterconnectAttachmentsService)(nil).DeletePartnerInterconnectAttachment), iaID)
}

// GetPartnerInterconnectAttachment mocks base method.
func (m *MockPartnerInterconnectAttachmentsService) GetPartnerInterconnectAttachment(iaID string) (*do.PartnerInterconnectAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartnerInterconnectAttachment", iaID)
	ret0, _ := ret[0].(*do.PartnerInterconnectAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartnerInterconnectAttachment indicates an expected call of GetPartnerInterconnectAttachment.
func (mr *MockPartnerInterconnectAttachmentsServiceMockRecorder) GetPartnerInterconnectAttachment(iaID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartnerInterconnectAttachment", reflect.TypeOf((*MockPartnerInterconnectAttachmentsService)(nil).GetPartnerInterconnectAttachment), iaID)
}

// ListPartnerInterconnectAttachments mocks base method.
func (m *MockPartnerInterconnectAttachmentsService) ListPartnerInterconnectAttachments() (do.PartnerInterconnectAttachments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPartnerInterconnectAttachments")
	ret0, _ := ret[0].(do.PartnerInterconnectAttachments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPartnerInterconnectAttachments indicates an expected call of ListPartnerInterconnectAttachments.
func (mr *MockPartnerInterconnectAttachmentsServiceMockRecorder) ListPartnerInterconnectAttachments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartnerInterconnectAttachments", reflect.TypeOf((*MockPartnerInterconnectAttachmentsService)(nil).ListPartnerInterconnectAttachments))
}

// UpdatePartnerInterconnectAttachment mocks base method.
func (m *MockPartnerInterconnectAttachmentsService) UpdatePartnerInterconnectAttachment(iaID string, req *godo.PartnerInterconnectAttachmentUpdateRequest) (*do.PartnerInterconnectAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePartnerInterconnectAttachment", iaID, req)
	ret0, _ := ret[0].(*do.PartnerInterconnectAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePartnerInterconnectAttachment indicates an expected call of UpdatePartnerInterconnectAttachment.
func (mr *MockPartnerInterconnectAttachmentsServiceMockRecorder) UpdatePartnerInterconnectAttachment(iaID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartnerInterconnectAttachment", reflect.TypeOf((*MockPartnerInterconnectAttachmentsService)(nil).UpdatePartnerInterconnectAttachment), iaID, req)
}
