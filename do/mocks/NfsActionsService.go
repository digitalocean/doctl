// Code generated by MockGen. DO NOT EDIT.
// Source: nfs_actions.go
//
// Generated by this command:
//
//	mockgen -source nfs_actions.go -package=mocks NfsActionsService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	do "github.com/digitalocean/doctl/do"
	gomock "go.uber.org/mock/gomock"
)

// MockNfsActionsService is a mock of NfsActionsService interface.
type MockNfsActionsService struct {
	ctrl     *gomock.Controller
	recorder *MockNfsActionsServiceMockRecorder
	isgomock struct{}
}

// MockNfsActionsServiceMockRecorder is the mock recorder for MockNfsActionsService.
type MockNfsActionsServiceMockRecorder struct {
	mock *MockNfsActionsService
}

// NewMockNfsActionsService creates a new mock instance.
func NewMockNfsActionsService(ctrl *gomock.Controller) *MockNfsActionsService {
	mock := &MockNfsActionsService{ctrl: ctrl}
	mock.recorder = &MockNfsActionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNfsActionsService) EXPECT() *MockNfsActionsServiceMockRecorder {
	return m.recorder
}

// Resize mocks base method.
func (m *MockNfsActionsService) Resize(id string, size uint64, region string) (*do.NfsAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resize", id, size, region)
	ret0, _ := ret[0].(*do.NfsAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resize indicates an expected call of Resize.
func (mr *MockNfsActionsServiceMockRecorder) Resize(id, size, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resize", reflect.TypeOf((*MockNfsActionsService)(nil).Resize), id, size, region)
}

// Snapshot mocks base method.
func (m *MockNfsActionsService) Snapshot(id, name, region string) (*do.NfsAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot", id, name, region)
	ret0, _ := ret[0].(*do.NfsAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockNfsActionsServiceMockRecorder) Snapshot(id, name, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockNfsActionsService)(nil).Snapshot), id, name, region)
}
