// Code generated by MockGen. DO NOT EDIT.
// Source: genai.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	do "github.com/digitalocean/doctl/do"
	godo "github.com/digitalocean/godo"
	gomock "go.uber.org/mock/gomock"
)

// MockGenAIService is a mock of GenAIService interface.
type MockGenAIService struct {
	ctrl     *gomock.Controller
	recorder *MockGenAIServiceMockRecorder
}

// MockGenAIServiceMockRecorder is the mock recorder for MockGenAIService.
type MockGenAIServiceMockRecorder struct {
	mock *MockGenAIService
}

// NewMockGenAIService creates a new mock instance.
func NewMockGenAIService(ctrl *gomock.Controller) *MockGenAIService {
	mock := &MockGenAIService{ctrl: ctrl}
	mock.recorder = &MockGenAIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenAIService) EXPECT() *MockGenAIServiceMockRecorder {
	return m.recorder
}

// CreateAgent mocks base method.
func (m *MockGenAIService) CreateAgent(req *godo.AgentCreateRequest) (*do.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgent", req)
	ret0, _ := ret[0].(*do.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAgent indicates an expected call of CreateAgent.
func (mr *MockGenAIServiceMockRecorder) CreateAgent(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgent", reflect.TypeOf((*MockGenAIService)(nil).CreateAgent), req)
}

// CreateAgentAPIKey mocks base method.
func (m *MockGenAIService) CreateAgentAPIKey(agentID string, req *godo.AgentAPIKeyCreateRequest) (*do.ApiKeyInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgentAPIKey", agentID, req)
	ret0, _ := ret[0].(*do.ApiKeyInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAgentAPIKey indicates an expected call of CreateAgentAPIKey.
func (mr *MockGenAIServiceMockRecorder) CreateAgentAPIKey(agentID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgentAPIKey", reflect.TypeOf((*MockGenAIService)(nil).CreateAgentAPIKey), agentID, req)
}

// DeleteAgent mocks base method.
func (m *MockGenAIService) DeleteAgent(agentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAgent", agentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAgent indicates an expected call of DeleteAgent.
func (mr *MockGenAIServiceMockRecorder) DeleteAgent(agentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgent", reflect.TypeOf((*MockGenAIService)(nil).DeleteAgent), agentID)
}

// DeleteAgentAPIKey mocks base method.
func (m *MockGenAIService) DeleteAgentAPIKey(agentID, apikeyID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAgentAPIKey", agentID, apikeyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAgentAPIKey indicates an expected call of DeleteAgentAPIKey.
func (mr *MockGenAIServiceMockRecorder) DeleteAgentAPIKey(agentID, apikeyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgentAPIKey", reflect.TypeOf((*MockGenAIService)(nil).DeleteAgentAPIKey), agentID, apikeyID)
}

// GetAgent mocks base method.
func (m *MockGenAIService) GetAgent(agentID string) (*do.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgent", agentID)
	ret0, _ := ret[0].(*do.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgent indicates an expected call of GetAgent.
func (mr *MockGenAIServiceMockRecorder) GetAgent(agentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgent", reflect.TypeOf((*MockGenAIService)(nil).GetAgent), agentID)
}

// ListAgentAPIKeys mocks base method.
func (m *MockGenAIService) ListAgentAPIKeys(agentId string) (do.ApiKeys, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentAPIKeys", agentId)
	ret0, _ := ret[0].(do.ApiKeys)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgentAPIKeys indicates an expected call of ListAgentAPIKeys.
func (mr *MockGenAIServiceMockRecorder) ListAgentAPIKeys(agentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentAPIKeys", reflect.TypeOf((*MockGenAIService)(nil).ListAgentAPIKeys), agentId)
}

// ListAgentVersions mocks base method.
func (m *MockGenAIService) ListAgentVersions(agentID string) (do.AgentVersions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentVersions", agentID)
	ret0, _ := ret[0].(do.AgentVersions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgentVersions indicates an expected call of ListAgentVersions.
func (mr *MockGenAIServiceMockRecorder) ListAgentVersions(agentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentVersions", reflect.TypeOf((*MockGenAIService)(nil).ListAgentVersions), agentID)
}

// ListAgents mocks base method.
func (m *MockGenAIService) ListAgents() (do.Agents, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgents")
	ret0, _ := ret[0].(do.Agents)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgents indicates an expected call of ListAgents.
func (mr *MockGenAIServiceMockRecorder) ListAgents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgents", reflect.TypeOf((*MockGenAIService)(nil).ListAgents))
}

// RegenerateAgentAPIKey mocks base method.
func (m *MockGenAIService) RegenerateAgentAPIKey(agentID, apikeyID string) (*do.ApiKeyInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegenerateAgentAPIKey", agentID, apikeyID)
	ret0, _ := ret[0].(*do.ApiKeyInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegenerateAgentAPIKey indicates an expected call of RegenerateAgentAPIKey.
func (mr *MockGenAIServiceMockRecorder) RegenerateAgentAPIKey(agentID, apikeyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegenerateAgentAPIKey", reflect.TypeOf((*MockGenAIService)(nil).RegenerateAgentAPIKey), agentID, apikeyID)
}

// UpdateAgent mocks base method.
func (m *MockGenAIService) UpdateAgent(agentID string, req *godo.AgentUpdateRequest) (*do.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgent", agentID, req)
	ret0, _ := ret[0].(*do.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgent indicates an expected call of UpdateAgent.
func (mr *MockGenAIServiceMockRecorder) UpdateAgent(agentID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgent", reflect.TypeOf((*MockGenAIService)(nil).UpdateAgent), agentID, req)
}

// UpdateAgentAPIKey mocks base method.
func (m *MockGenAIService) UpdateAgentAPIKey(agentID, apikeyID string, req *godo.AgentAPIKeyUpdateRequest) (*do.ApiKeyInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentAPIKey", agentID, apikeyID, req)
	ret0, _ := ret[0].(*do.ApiKeyInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentAPIKey indicates an expected call of UpdateAgentAPIKey.
func (mr *MockGenAIServiceMockRecorder) UpdateAgentAPIKey(agentID, apikeyID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentAPIKey", reflect.TypeOf((*MockGenAIService)(nil).UpdateAgentAPIKey), agentID, apikeyID, req)
}

// UpdateAgentVisibility mocks base method.
func (m *MockGenAIService) UpdateAgentVisibility(agentID string, req *godo.AgentVisibilityUpdateRequest) (*do.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentVisibility", agentID, req)
	ret0, _ := ret[0].(*do.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentVisibility indicates an expected call of UpdateAgentVisibility.
func (mr *MockGenAIServiceMockRecorder) UpdateAgentVisibility(agentID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentVisibility", reflect.TypeOf((*MockGenAIService)(nil).UpdateAgentVisibility), agentID, req)
}
