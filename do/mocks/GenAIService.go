// Code generated by MockGen. DO NOT EDIT.
// Source: genai.go
//
// Generated by this command:
//
//	mockgen -source genai.go -package=mocks GenAIService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	do "github.com/digitalocean/doctl/do"
	godo "github.com/digitalocean/godo"
	gomock "go.uber.org/mock/gomock"
)

// MockGenAIService is a mock of GenAIService interface.
type MockGenAIService struct {
	ctrl     *gomock.Controller
	recorder *MockGenAIServiceMockRecorder
	isgomock struct{}
}

// MockGenAIServiceMockRecorder is the mock recorder for MockGenAIService.
type MockGenAIServiceMockRecorder struct {
	mock *MockGenAIService
}

// NewMockGenAIService creates a new mock instance.
func NewMockGenAIService(ctrl *gomock.Controller) *MockGenAIService {
	mock := &MockGenAIService{ctrl: ctrl}
	mock.recorder = &MockGenAIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenAIService) EXPECT() *MockGenAIServiceMockRecorder {
	return m.recorder
}

// CreateAgent mocks base method.
func (m *MockGenAIService) CreateAgent(req *godo.AgentCreateRequest) (*do.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgent", req)
	ret0, _ := ret[0].(*do.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAgent indicates an expected call of CreateAgent.
func (mr *MockGenAIServiceMockRecorder) CreateAgent(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgent", reflect.TypeOf((*MockGenAIService)(nil).CreateAgent), req)
}

// DeleteAgent mocks base method.
func (m *MockGenAIService) DeleteAgent(agentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAgent", agentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAgent indicates an expected call of DeleteAgent.
func (mr *MockGenAIServiceMockRecorder) DeleteAgent(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgent", reflect.TypeOf((*MockGenAIService)(nil).DeleteAgent), agentID)
}

// GetAgent mocks base method.
func (m *MockGenAIService) GetAgent(agentID string) (*do.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgent", agentID)
	ret0, _ := ret[0].(*do.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgent indicates an expected call of GetAgent.
func (mr *MockGenAIServiceMockRecorder) GetAgent(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgent", reflect.TypeOf((*MockGenAIService)(nil).GetAgent), agentID)
}

// ListAgents mocks base method.
func (m *MockGenAIService) ListAgents() (do.Agents, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgents")
	ret0, _ := ret[0].(do.Agents)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgents indicates an expected call of ListAgents.
func (mr *MockGenAIServiceMockRecorder) ListAgents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgents", reflect.TypeOf((*MockGenAIService)(nil).ListAgents))
}

// UpdateAgent mocks base method.
func (m *MockGenAIService) UpdateAgent(agentID string, req *godo.AgentUpdateRequest) (*do.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgent", agentID, req)
	ret0, _ := ret[0].(*do.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgent indicates an expected call of UpdateAgent.
func (mr *MockGenAIServiceMockRecorder) UpdateAgent(agentID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgent", reflect.TypeOf((*MockGenAIService)(nil).UpdateAgent), agentID, req)
}

// UpdateAgentVisibility mocks base method.
func (m *MockGenAIService) UpdateAgentVisibility(agentID string, req *godo.AgentVisibilityUpdateRequest) (*do.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentVisibility", agentID, req)
	ret0, _ := ret[0].(*do.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentVisibility indicates an expected call of UpdateAgentVisibility.
func (mr *MockGenAIServiceMockRecorder) UpdateAgentVisibility(agentID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentVisibility", reflect.TypeOf((*MockGenAIService)(nil).UpdateAgentVisibility), agentID, req)
}
